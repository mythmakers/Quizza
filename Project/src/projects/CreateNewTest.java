/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projects;

import com.sun.glass.events.KeyEvent;
import java.awt.Frame;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author lenovo
 */
public class CreateNewTest extends javax.swing.JFrame {
    int num,n=1,number;
    boolean online;
    String username,testname,subject;
    Connection con = null;
    Statement st = null;
    /**
     * Creates new form CreateNewTest
     */
    public CreateNewTest() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }
    public CreateNewTest(String username,String subject,boolean online)
    {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        back.setEnabled(true);
        this.username = username;
        this.online = online;
        this.subject = subject;
        tnameError.setVisible(false);
        qnol.setVisible(false);
        qno.setVisible(false);
        Next2.setVisible(false);
        qnoError.setVisible(false);
        questionl.setVisible(false);
        questionPanel.setVisible(false);
        optionsl.setVisible(false);
        one.setVisible(false);
        two.setVisible(false);
        three.setVisible(false);
        four.setVisible(false);
        option1.setVisible(false);
        option2.setVisible(false);
        option3.setVisible(false);
        option4.setVisible(false);
        correctansl.setVisible(false);
        correctans.setVisible(false);
        NextQuestion.setVisible(false);
        quesError.setVisible(false);
        ansError.setVisible(false);
        
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            //System.out.println("Driver Loaded ");

            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/"+subject+"","root","");
            //System.out.println("hello Connected");

            st = con.createStatement();
        }
        catch (ClassNotFoundException e) 
        {
            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, e);
        } 
        catch (SQLException e) 
        { 
            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "Unable to access in this subject this time");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        qnol = new javax.swing.JLabel();
        qno = new javax.swing.JTextField();
        Next2 = new javax.swing.JButton();
        questionl = new javax.swing.JLabel();
        optionsl = new javax.swing.JLabel();
        option1 = new javax.swing.JTextField();
        option4 = new javax.swing.JTextField();
        one = new javax.swing.JLabel();
        two = new javax.swing.JLabel();
        three = new javax.swing.JLabel();
        four = new javax.swing.JLabel();
        option3 = new javax.swing.JTextField();
        option2 = new javax.swing.JTextField();
        correctans = new javax.swing.JTextField();
        correctansl = new javax.swing.JLabel();
        NextQuestion = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        qnoError = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        ansError = new javax.swing.JLabel();
        quesError = new javax.swing.JLabel();
        testNamel = new javax.swing.JLabel();
        testName = new javax.swing.JTextField();
        Next1 = new javax.swing.JButton();
        tnameError = new javax.swing.JLabel();
        questionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        question = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(540, 300));
        setPreferredSize(new java.awt.Dimension(600, 600));

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 600));

        qnol.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        qnol.setText("Enter total number of questions to be asked : ");

        qno.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        qno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qnoKeyTyped(evt);
            }
        });

        Next2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        Next2.setText("Next");
        Next2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next2ActionPerformed(evt);
            }
        });
        Next2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Next2KeyTyped(evt);
            }
        });

        questionl.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        questionl.setText("Question n out of num:");

        optionsl.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        optionsl.setText("Options : ");

        option1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        option4.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        option4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option4ActionPerformed(evt);
            }
        });

        one.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        one.setText("1.");

        two.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        two.setText("2.");

        three.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        three.setText("3.");

        four.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        four.setText("4.");

        option3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        option2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        correctans.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        correctans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correctansActionPerformed(evt);
            }
        });
        correctans.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                correctansKeyTyped(evt);
            }
        });

        correctansl.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        correctansl.setText("Correct Answer :");

        NextQuestion.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        NextQuestion.setText("Next Question");
        NextQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextQuestionActionPerformed(evt);
            }
        });
        NextQuestion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NextQuestionKeyTyped(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 102, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Creating Test");

        qnoError.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        qnoError.setForeground(new java.awt.Color(255, 0, 0));
        qnoError.setText("*enter here");

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projects/back-icon.png"))); // NOI18N
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        ansError.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ansError.setForeground(new java.awt.Color(255, 0, 0));
        ansError.setText("*Answer did not match");

        quesError.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        quesError.setForeground(new java.awt.Color(255, 0, 0));
        quesError.setText("*complete your question");

        testNamel.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        testNamel.setText("Test Name :");

        testName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        testName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testNameActionPerformed(evt);
            }
        });
        testName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                testNameKeyTyped(evt);
            }
        });

        Next1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        Next1.setText("Next");
        Next1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next1ActionPerformed(evt);
            }
        });
        Next1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Next1KeyTyped(evt);
            }
        });

        tnameError.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tnameError.setForeground(new java.awt.Color(255, 0, 0));
        tnameError.setText("*enter here");

        questionPanel.setBackground(new java.awt.Color(153, 153, 255));
        questionPanel.setPreferredSize(new java.awt.Dimension(100, 55));

        question.setColumns(20);
        question.setFont(new java.awt.Font("Courier New", 0, 20)); // NOI18N
        question.setRows(5);
        question.setBorder(null);
        jScrollPane1.setViewportView(question);

        javax.swing.GroupLayout questionPanelLayout = new javax.swing.GroupLayout(questionPanel);
        questionPanel.setLayout(questionPanelLayout);
        questionPanelLayout.setHorizontalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        questionPanelLayout.setVerticalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(back)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(203, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(questionl)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(qnol)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(testNamel)
                                .addGap(18, 18, 18)
                                .addComponent(testName, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Next1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tnameError))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(Next2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(qno, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(qnoError))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(three)
                            .addComponent(one))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(option1)
                            .addComponent(option3)
                            .addComponent(correctans)
                            .addComponent(ansError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(correctansl, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(100, 100, 100)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(four)
                            .addComponent(two))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(option2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(option4)
                            .addComponent(quesError)
                            .addComponent(NextQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(optionsl))
                .addGap(0, 80, Short.MAX_VALUE))
            .addComponent(questionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testNamel)
                    .addComponent(testName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Next1)
                    .addComponent(tnameError))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qnol)
                    .addComponent(qno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qnoError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Next2)
                .addGap(12, 12, 12)
                .addComponent(questionl)
                .addGap(18, 18, 18)
                .addComponent(questionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionsl)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(option1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(one))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(three)
                            .addComponent(option3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(correctansl)
                        .addGap(7, 7, 7)
                        .addComponent(correctans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ansError))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(option2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(two))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(four)
                            .addComponent(option4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addComponent(NextQuestion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(quesError)))
                .addGap(60, 60, 60))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void qnoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qnoKeyTyped
        int ch = evt.getKeyChar();
        if(!(Character.isDigit(ch) || (ch==KeyEvent.VK_BACKSPACE) || ch==KeyEvent.VK_DELETE || ch==KeyEvent.VK_ENTER))
        {
            getToolkit().beep();
            evt.consume();
        }
        if(qno.getText().length()==2)
        {
            getToolkit().beep();
            evt.consume();
        }
        if(ch==KeyEvent.VK_ENTER)
        {
            Next2.doClick();
        }
    }//GEN-LAST:event_qnoKeyTyped

    private void Next2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next2ActionPerformed
        try{
        String testPass = "";
        if(online){
            Frame f = new Frame();
            testPass = JOptionPane.showInputDialog(f, "Select a Password for this test", "Password", JOptionPane.QUESTION_MESSAGE);
            if(testPass==null)
                throw new MyException("Cancel is pressed");
            else if(testPass.trim().equals(""))
            {
                JOptionPane.showMessageDialog(f, "Enter Something");
                throw new MyException("Enter Something");
            }
        }
        ansError.setVisible(false);
        String n = qno.getText();
        String query;
        if(!n.equals(""))
        {
            num = Integer.parseInt(n);
            try 
            {
                if(online){
                    query = "INSERT INTO `"+subject+"`.`online_test` values('"+testname+"','"+num+"','"+testPass+"')";
                }
                else{
                    query = "INSERT INTO `"+subject+"`.`test` values('"+testname+"','"+num+"')";
                }
                
                int i = st.executeUpdate(query);
               
                if(i>0)
                {
                    qnol.setVisible(false);
                    qno.setVisible(false);
                    Next2.setVisible(false);
                    qnoError.setVisible(false);
                    questionl.setVisible(true);
                    questionPanel.setVisible(true);
                    optionsl.setVisible(true);
                    questionl.setText("Question "+this.n+" out of "+num+" :");
                    one.setVisible(true);
                    two.setVisible(true);
                    three.setVisible(true);
                    four.setVisible(true);
                    option1.setVisible(true);
                    option2.setVisible(true);
                    option3.setVisible(true);
                    option4.setVisible(true);
                    correctansl.setVisible(true);
                    correctans.setVisible(true);
                    NextQuestion.setVisible(true);
                    back.setVisible(false);
                }
                else
                {
                    JFrame f = new JFrame();
                    JOptionPane.showMessageDialog(f, "Table Not Created...");
                }
            }
            catch(SQLException e)
            {
                StringWriter sw = new StringWriter();
                e.printStackTrace(new PrintWriter(sw));
                String es = sw.toString();
                int i = es.indexOf(":");
                JFrame f = new JFrame();
                JOptionPane.showMessageDialog(f, es.substring(i+1, es.length()));
            }
        }
        else
        {
            qnoError.setVisible(true);
        }
        if(num==1)
            NextQuestion.setText("Create");
        }
        catch(MyException e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_Next2ActionPerformed

    private void option4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_option4ActionPerformed

    private void correctansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correctansActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_correctansActionPerformed

    private void NextQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextQuestionActionPerformed
        ansError.setVisible(false);
        quesError.setVisible(false);
        String ques = question.getText();
        String op1 = option1.getText();
        String op2 = option2.getText();
        String op3 = option3.getText();
        String op4 = option4.getText();
        String corrAns = correctans.getText();
        String query,tablequery;
        if(!(ques.trim().equals("") && op1.trim().equals("") && op2.trim().equals("") && op3.trim().equals("") && op4.trim().equals("") && corrAns.trim().equals("")))
        {
            if(corrAns.equalsIgnoreCase(op1) || corrAns.equalsIgnoreCase(op2) || corrAns.equalsIgnoreCase(op3) || corrAns.equalsIgnoreCase(op4))
            {
                try 
                {
                    if(online){
                        query = "INSERT INTO `"+subject+"`.`"+testname+"`(`Q_No`,`Question`,`option1`,`option2`,`option3`,`option4`,`correct`) VALUES ( '"+n+"','"+ques+"','"+op1+"','"+op2+"','"+op3+"','"+op4+"','"+corrAns+"')";
                    }
                    else{
                        query = "INSERT INTO `"+subject+"`.`"+testname+"`(`Q_No`,`Question`,`option1`,`option2`,`option3`,`option4`,`correct`) VALUES ( '"+n+"','"+ques+"','"+op1+"','"+op2+"','"+op3+"','"+op4+"','"+corrAns+"')";
                    }
                    
                    int i = st.executeUpdate(query);

                    if(i>0)
                    {
                        if(n==(num-1))
                            NextQuestion.setText("Create");
                        if(n==num)
                        {
                            JFrame f = new JFrame();
                            JOptionPane.showMessageDialog(f, "Test Created");
                            try
                            {
                                Class.forName("com.mysql.jdbc.Driver");
           
                                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/studentresult","root","");
            
                                st = con.createStatement();
                                if(online){
                                    tablequery = "CREATE TABLE `studentresult`.`online_"+testname+"`"+
                                            "( `rollNo` VARCHAR(15) NOT NULL ,"+
                                            " `marks` INT NOT NULL ,"+
                                            "`date` DATE NOT NULL , PRIMARY KEY (`rollNo`))";
                                }
                                else{
                                    tablequery = "CREATE TABLE `studentresult`.`"+testname+"`"+
                                            "( `rollNo` VARCHAR(15) NOT NULL ,"+
                                            " `marks` INT NOT NULL ,"+
                                            "`date` DATE NOT NULL , PRIMARY KEY (`rollNo`))";
                                }
                                
                                st.executeUpdate(tablequery);
                                
                            }
                            catch (ClassNotFoundException e) 
                            {
                                System.out.println(e);
                            } 
                            catch (SQLException e) 
                            { 
                                System.out.println(e);
                            }
                            new Home(username,subject).setVisible(true);
                            this.setVisible(false);
                        }
                        else
                        {
                            n++;
                            questionl.setText("Question "+n+" out of "+num+" :");
                            question.setText("");
                            option1.setText("");
                            option2.setText("");
                            option3.setText("");
                            option4.setText("");
                            correctans.setText("");
                        }
                    }
                    else
                    {
                        JFrame f = new JFrame();
                        JOptionPane.showMessageDialog(f, "Question Insertion failed...");
                    }
                } 
                catch (SQLException e) 
                {
                    System.out.println(e);
                }
            }
            else
            {
                quesError.setVisible(false);
                ansError.setVisible(true);
            }
        }
        else
        {
            ansError.setVisible(false);
            quesError.setVisible(true);
        }
    }//GEN-LAST:event_NextQuestionActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        new Home(username,subject).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backActionPerformed

    private void testNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_testNameActionPerformed

    private void Next1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next1ActionPerformed
        back.setEnabled(false);
        testname = testName.getText();
        if(!testname.equals(""))
        {
            try
            {
                String tablequery = "CREATE TABLE `"+subject+"`.`"+testname+"` "+
                                    " (`Q_No` int NOT NULL,"+
                                    " `Question` VARCHAR(255) NOT NULL, "+
                                    " `option1` VARCHAR(30) NOT NULL, "+
                                    " `option2` VARCHAR(30) NOT NULL, "+
                                    " `option3` VARCHAR(30) NOT NULL, "+
                                    " `option4` VARCHAR(30) NOT NULL, "+
                                    " `correct` VARCHAR(30) NOT NULL, PRIMARY KEY (`Q_No`))";
                
                int i1 = st.executeUpdate(tablequery);
                
                if(i1==0)
                {
                    testNamel.setVisible(false);
                    testName.setVisible(false);
                    Next1.setVisible(false);
                    tnameError.setVisible(false);
                    qnol.setVisible(true);
                    qno.setVisible(true);
                    Next2.setVisible(true);
                }
                else
                {
                    JFrame f = new JFrame();
                    JOptionPane.showMessageDialog(f, "Table Not Created");
                }
            } 
            catch (SQLException e) 
            {
                StringWriter sw = new StringWriter();
                e.printStackTrace(new PrintWriter(sw));
                String es = sw.toString();
                JFrame f = new JFrame();
                JOptionPane.showMessageDialog(f, es.substring(es.indexOf(':')+2, es.indexOf('\n')).replaceAll("Table", "Test"));
            }
        }
        else
        {
            tnameError.setVisible(true);
        }
    }//GEN-LAST:event_Next1ActionPerformed

    private void testNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_testNameKeyTyped
        int ch = evt.getKeyChar();
        if(ch==KeyEvent.VK_ENTER)
        {
            Next1.doClick();
        }
    }//GEN-LAST:event_testNameKeyTyped

    private void correctansKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_correctansKeyTyped
        int ch = evt.getKeyChar();
        if(ch==KeyEvent.VK_ENTER)
        {
            NextQuestion.doClick();
        }
    }//GEN-LAST:event_correctansKeyTyped

    private void Next1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Next1KeyTyped
        int ch = evt.getKeyChar();
        if(ch==KeyEvent.VK_ENTER)
        {
            Next1.doClick();
        }
    }//GEN-LAST:event_Next1KeyTyped

    private void Next2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Next2KeyTyped
        int ch = evt.getKeyChar();
        if(ch==KeyEvent.VK_ENTER)
        {
            Next2.doClick();
        }
    }//GEN-LAST:event_Next2KeyTyped

    private void NextQuestionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NextQuestionKeyTyped
        int ch = evt.getKeyChar();
        if(ch==KeyEvent.VK_ENTER)
        {
            NextQuestion.doClick();
        }
    }//GEN-LAST:event_NextQuestionKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateNewTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateNewTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateNewTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateNewTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateNewTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Next1;
    private javax.swing.JButton Next2;
    private javax.swing.JButton NextQuestion;
    private javax.swing.JLabel ansError;
    private javax.swing.JButton back;
    private javax.swing.JTextField correctans;
    private javax.swing.JLabel correctansl;
    private javax.swing.JLabel four;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel one;
    private javax.swing.JTextField option1;
    private javax.swing.JTextField option2;
    private javax.swing.JTextField option3;
    private javax.swing.JTextField option4;
    private javax.swing.JLabel optionsl;
    private javax.swing.JTextField qno;
    private javax.swing.JLabel qnoError;
    private javax.swing.JLabel qnol;
    private javax.swing.JLabel quesError;
    private javax.swing.JTextArea question;
    private javax.swing.JPanel questionPanel;
    private javax.swing.JLabel questionl;
    private javax.swing.JTextField testName;
    private javax.swing.JLabel testNamel;
    private javax.swing.JLabel three;
    private javax.swing.JLabel tnameError;
    private javax.swing.JLabel two;
    // End of variables declaration//GEN-END:variables
}

class MyException extends Exception{
    public MyException(String s)
    {
        super(s);
    }
}